=begin
#CommaFeed API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module CommafeedClient
  class FeedCategoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a category
    # Add a new feed category
    # @param add_category_request [AddCategoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def add_category(add_category_request, opts = {})
      data, _status_code, _headers = add_category_with_http_info(add_category_request, opts)
      data
    end

    # Add a category
    # Add a new feed category
    # @param add_category_request [AddCategoryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def add_category_with_http_info(add_category_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.add_category ...'
      end
      # verify the required parameter 'add_category_request' is set
      if @api_client.config.client_side_validation && add_category_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_category_request' when calling FeedCategoriesApi.add_category"
      end
      # resource path
      local_var_path = '/rest/category/add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_category_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Integer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.add_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#add_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collapse a category
    # Save collapsed or expanded status for a category
    # @param collapse_request [CollapseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collapse_category(collapse_request, opts = {})
      collapse_category_with_http_info(collapse_request, opts)
      nil
    end

    # Collapse a category
    # Save collapsed or expanded status for a category
    # @param collapse_request [CollapseRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def collapse_category_with_http_info(collapse_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.collapse_category ...'
      end
      # verify the required parameter 'collapse_request' is set
      if @api_client.config.client_side_validation && collapse_request.nil?
        fail ArgumentError, "Missing the required parameter 'collapse_request' when calling FeedCategoriesApi.collapse_category"
      end
      # resource path
      local_var_path = '/rest/category/collapse'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(collapse_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.collapse_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#collapse_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a category
    # Delete an existing feed category
    # @param id_request [IDRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_category(id_request, opts = {})
      delete_category_with_http_info(id_request, opts)
      nil
    end

    # Delete a category
    # Delete an existing feed category
    # @param id_request [IDRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_category_with_http_info(id_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.delete_category ...'
      end
      # verify the required parameter 'id_request' is set
      if @api_client.config.client_side_validation && id_request.nil?
        fail ArgumentError, "Missing the required parameter 'id_request' when calling FeedCategoriesApi.delete_category"
      end
      # resource path
      local_var_path = '/rest/category/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(id_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.delete_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#delete_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category entries
    # Get a list of category entries
    # @param id [String] id of the category, &#39;all&#39; or &#39;starred&#39;
    # @param read_type [String] all entries or only unread ones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :newer_than only entries newer than this
    # @option opts [Integer] :offset offset for paging (default to 0)
    # @option opts [Integer] :limit limit for paging, default 20, maximum 1000 (default to 20)
    # @option opts [String] :order ordering (default to 'desc')
    # @option opts [String] :keywords search for keywords in either the title or the content of the entries, separated by spaces, 3 characters minimum
    # @option opts [String] :excluded_subscription_ids comma-separated list of excluded subscription ids
    # @option opts [String] :tag keep only entries tagged with this tag
    # @return [Entries]
    def get_category_entries(id, read_type, opts = {})
      data, _status_code, _headers = get_category_entries_with_http_info(id, read_type, opts)
      data
    end

    # Get category entries
    # Get a list of category entries
    # @param id [String] id of the category, &#39;all&#39; or &#39;starred&#39;
    # @param read_type [String] all entries or only unread ones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :newer_than only entries newer than this
    # @option opts [Integer] :offset offset for paging (default to 0)
    # @option opts [Integer] :limit limit for paging, default 20, maximum 1000 (default to 20)
    # @option opts [String] :order ordering (default to 'desc')
    # @option opts [String] :keywords search for keywords in either the title or the content of the entries, separated by spaces, 3 characters minimum
    # @option opts [String] :excluded_subscription_ids comma-separated list of excluded subscription ids
    # @option opts [String] :tag keep only entries tagged with this tag
    # @return [Array<(Entries, Integer, Hash)>] Entries data, response status code and response headers
    def get_category_entries_with_http_info(id, read_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.get_category_entries ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeedCategoriesApi.get_category_entries"
      end
      # verify the required parameter 'read_type' is set
      if @api_client.config.client_side_validation && read_type.nil?
        fail ArgumentError, "Missing the required parameter 'read_type' when calling FeedCategoriesApi.get_category_entries"
      end
      # verify enum value
      allowable_values = ["all", "unread"]
      if @api_client.config.client_side_validation && !allowable_values.include?(read_type)
        fail ArgumentError, "invalid value for \"read_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/rest/category/entries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'readType'] = read_type
      query_params[:'newerThan'] = opts[:'newer_than'] if !opts[:'newer_than'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'excludedSubscriptionIds'] = opts[:'excluded_subscription_ids'] if !opts[:'excluded_subscription_ids'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Entries'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.get_category_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#get_category_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category entries as feed
    # Get a feed of category entries
    # @param id [String] id of the category, &#39;all&#39; or &#39;starred&#39;
    # @param read_type [String] all entries or only unread ones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :newer_than only entries newer than this
    # @option opts [Integer] :offset offset for paging (default to 0)
    # @option opts [Integer] :limit limit for paging, default 20, maximum 1000 (default to 20)
    # @option opts [String] :order date ordering (default to 'desc')
    # @option opts [String] :keywords search for keywords in either the title or the content of the entries, separated by spaces, 3 characters minimum
    # @option opts [String] :excluded_subscription_ids comma-separated list of excluded subscription ids
    # @option opts [String] :tag keep only entries tagged with this tag
    # @return [nil]
    def get_category_entries_as_feed(id, read_type, opts = {})
      get_category_entries_as_feed_with_http_info(id, read_type, opts)
      nil
    end

    # Get category entries as feed
    # Get a feed of category entries
    # @param id [String] id of the category, &#39;all&#39; or &#39;starred&#39;
    # @param read_type [String] all entries or only unread ones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :newer_than only entries newer than this
    # @option opts [Integer] :offset offset for paging (default to 0)
    # @option opts [Integer] :limit limit for paging, default 20, maximum 1000 (default to 20)
    # @option opts [String] :order date ordering (default to 'desc')
    # @option opts [String] :keywords search for keywords in either the title or the content of the entries, separated by spaces, 3 characters minimum
    # @option opts [String] :excluded_subscription_ids comma-separated list of excluded subscription ids
    # @option opts [String] :tag keep only entries tagged with this tag
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_category_entries_as_feed_with_http_info(id, read_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.get_category_entries_as_feed ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeedCategoriesApi.get_category_entries_as_feed"
      end
      # verify the required parameter 'read_type' is set
      if @api_client.config.client_side_validation && read_type.nil?
        fail ArgumentError, "Missing the required parameter 'read_type' when calling FeedCategoriesApi.get_category_entries_as_feed"
      end
      # verify enum value
      allowable_values = ["all", "unread"]
      if @api_client.config.client_side_validation && !allowable_values.include?(read_type)
        fail ArgumentError, "invalid value for \"read_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/rest/category/entriesAsFeed'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'readType'] = read_type
      query_params[:'newerThan'] = opts[:'newer_than'] if !opts[:'newer_than'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'excludedSubscriptionIds'] = opts[:'excluded_subscription_ids'] if !opts[:'excluded_subscription_ids'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.get_category_entries_as_feed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#get_category_entries_as_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get root category
    # Get all categories and subscriptions of the user
    # @param [Hash] opts the optional parameters
    # @return [Category]
    def get_root_category(opts = {})
      data, _status_code, _headers = get_root_category_with_http_info(opts)
      data
    end

    # Get root category
    # Get all categories and subscriptions of the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Category, Integer, Hash)>] Category data, response status code and response headers
    def get_root_category_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.get_root_category ...'
      end
      # resource path
      local_var_path = '/rest/category/get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Category'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.get_root_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#get_root_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get unread count for feed subscriptions
    # @param [Hash] opts the optional parameters
    # @return [Array<UnreadCount>]
    def get_unread_count(opts = {})
      data, _status_code, _headers = get_unread_count_with_http_info(opts)
      data
    end

    # Get unread count for feed subscriptions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnreadCount>, Integer, Hash)>] Array<UnreadCount> data, response status code and response headers
    def get_unread_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.get_unread_count ...'
      end
      # resource path
      local_var_path = '/rest/category/unreadCount'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UnreadCount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.get_unread_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#get_unread_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark category entries
    # Mark feed entries of this category as read
    # @param mark_request [MarkRequest] category id, or &#39;all&#39;
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_category_entries(mark_request, opts = {})
      mark_category_entries_with_http_info(mark_request, opts)
      nil
    end

    # Mark category entries
    # Mark feed entries of this category as read
    # @param mark_request [MarkRequest] category id, or &#39;all&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_category_entries_with_http_info(mark_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.mark_category_entries ...'
      end
      # verify the required parameter 'mark_request' is set
      if @api_client.config.client_side_validation && mark_request.nil?
        fail ArgumentError, "Missing the required parameter 'mark_request' when calling FeedCategoriesApi.mark_category_entries"
      end
      # resource path
      local_var_path = '/rest/category/mark'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mark_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.mark_category_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#mark_category_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename a category
    # Rename an existing feed category
    # @param category_modification_request [CategoryModificationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_category(category_modification_request, opts = {})
      modify_category_with_http_info(category_modification_request, opts)
      nil
    end

    # Rename a category
    # Rename an existing feed category
    # @param category_modification_request [CategoryModificationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_category_with_http_info(category_modification_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedCategoriesApi.modify_category ...'
      end
      # verify the required parameter 'category_modification_request' is set
      if @api_client.config.client_side_validation && category_modification_request.nil?
        fail ArgumentError, "Missing the required parameter 'category_modification_request' when calling FeedCategoriesApi.modify_category"
      end
      # resource path
      local_var_path = '/rest/category/modify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(category_modification_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedCategoriesApi.modify_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedCategoriesApi#modify_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
