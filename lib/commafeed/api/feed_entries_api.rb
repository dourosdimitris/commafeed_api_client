=begin
#CommaFeed API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module CommafeedClient
  class FeedEntriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get list of tags for the user
    # Get list of tags for the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_tags(opts = {})
      get_tags_with_http_info(opts)
      nil
    end

    # Get list of tags for the user
    # Get list of tags for the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedEntriesApi.get_tags ...'
      end
      # resource path
      local_var_path = '/rest/entry/tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedEntriesApi.get_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedEntriesApi#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark multiple feed entries
    # Mark feed entries as read/unread
    # @param multiple_mark_request [MultipleMarkRequest] Multiple Mark Request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_entries(multiple_mark_request, opts = {})
      mark_entries_with_http_info(multiple_mark_request, opts)
      nil
    end

    # Mark multiple feed entries
    # Mark feed entries as read/unread
    # @param multiple_mark_request [MultipleMarkRequest] Multiple Mark Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_entries_with_http_info(multiple_mark_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedEntriesApi.mark_entries ...'
      end
      # verify the required parameter 'multiple_mark_request' is set
      if @api_client.config.client_side_validation && multiple_mark_request.nil?
        fail ArgumentError, "Missing the required parameter 'multiple_mark_request' when calling FeedEntriesApi.mark_entries"
      end
      # resource path
      local_var_path = '/rest/entry/markMultiple'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(multiple_mark_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedEntriesApi.mark_entries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedEntriesApi#mark_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark a feed entry
    # Mark a feed entry as read/unread
    # @param mark_request [MarkRequest] Mark Request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_entry(mark_request, opts = {})
      mark_entry_with_http_info(mark_request, opts)
      nil
    end

    # Mark a feed entry
    # Mark a feed entry as read/unread
    # @param mark_request [MarkRequest] Mark Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_entry_with_http_info(mark_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedEntriesApi.mark_entry ...'
      end
      # verify the required parameter 'mark_request' is set
      if @api_client.config.client_side_validation && mark_request.nil?
        fail ArgumentError, "Missing the required parameter 'mark_request' when calling FeedEntriesApi.mark_entry"
      end
      # resource path
      local_var_path = '/rest/entry/mark'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mark_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedEntriesApi.mark_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedEntriesApi#mark_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Star a feed entry
    # Mark a feed entry as read/unread
    # @param star_request [StarRequest] Star Request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def star_entry(star_request, opts = {})
      star_entry_with_http_info(star_request, opts)
      nil
    end

    # Star a feed entry
    # Mark a feed entry as read/unread
    # @param star_request [StarRequest] Star Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def star_entry_with_http_info(star_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedEntriesApi.star_entry ...'
      end
      # verify the required parameter 'star_request' is set
      if @api_client.config.client_side_validation && star_request.nil?
        fail ArgumentError, "Missing the required parameter 'star_request' when calling FeedEntriesApi.star_entry"
      end
      # resource path
      local_var_path = '/rest/entry/star'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(star_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedEntriesApi.star_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedEntriesApi#star_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set feed entry tags
    # @param tag_request [TagRequest] Tag Request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def tag_entry(tag_request, opts = {})
      tag_entry_with_http_info(tag_request, opts)
      nil
    end

    # Set feed entry tags
    # @param tag_request [TagRequest] Tag Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def tag_entry_with_http_info(tag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeedEntriesApi.tag_entry ...'
      end
      # verify the required parameter 'tag_request' is set
      if @api_client.config.client_side_validation && tag_request.nil?
        fail ArgumentError, "Missing the required parameter 'tag_request' when calling FeedEntriesApi.tag_entry"
      end
      # resource path
      local_var_path = '/rest/entry/tag'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tag_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"FeedEntriesApi.tag_entry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeedEntriesApi#tag_entry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
