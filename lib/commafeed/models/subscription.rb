=begin
#CommaFeed API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module CommafeedClient
  # User information
  class Subscription
    # subscription id
    attr_accessor :id

    # subscription name
    attr_accessor :name

    # error message while fetching the feed
    attr_accessor :message

    # error count
    attr_accessor :error_count

    # last time the feed was refreshed
    attr_accessor :last_refresh

    # next time the feed refresh is planned, null if refresh is already queued
    attr_accessor :next_refresh

    # this subscription's feed url
    attr_accessor :feed_url

    # this subscription's website url
    attr_accessor :feed_link

    # The favicon url to use for this feed
    attr_accessor :icon_url

    # unread count
    attr_accessor :unread

    # category id
    attr_accessor :category_id

    # position of the subscription's in the list
    attr_accessor :position

    # date of the newest item
    attr_accessor :newest_item_time

    # JEXL string evaluated on new entries to mark them as read if they do not match
    attr_accessor :filter

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'message' => :'message',
        :'error_count' => :'errorCount',
        :'last_refresh' => :'lastRefresh',
        :'next_refresh' => :'nextRefresh',
        :'feed_url' => :'feedUrl',
        :'feed_link' => :'feedLink',
        :'icon_url' => :'iconUrl',
        :'unread' => :'unread',
        :'category_id' => :'categoryId',
        :'position' => :'position',
        :'newest_item_time' => :'newestItemTime',
        :'filter' => :'filter'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'message' => :'String',
        :'error_count' => :'Integer',
        :'last_refresh' => :'Float',
        :'next_refresh' => :'Float',
        :'feed_url' => :'String',
        :'feed_link' => :'String',
        :'icon_url' => :'String',
        :'unread' => :'Integer',
        :'category_id' => :'String',
        :'position' => :'Integer',
        :'newest_item_time' => :'Float',
        :'filter' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CommafeedClient::Subscription` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CommafeedClient::Subscription`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'error_count')
        self.error_count = attributes[:'error_count']
      else
        self.error_count = nil
      end

      if attributes.key?(:'last_refresh')
        self.last_refresh = attributes[:'last_refresh']
      end

      if attributes.key?(:'next_refresh')
        self.next_refresh = attributes[:'next_refresh']
      end

      if attributes.key?(:'feed_url')
        self.feed_url = attributes[:'feed_url']
      else
        self.feed_url = nil
      end

      if attributes.key?(:'feed_link')
        self.feed_link = attributes[:'feed_link']
      else
        self.feed_link = nil
      end

      if attributes.key?(:'icon_url')
        self.icon_url = attributes[:'icon_url']
      else
        self.icon_url = nil
      end

      if attributes.key?(:'unread')
        self.unread = attributes[:'unread']
      else
        self.unread = nil
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'newest_item_time')
        self.newest_item_time = attributes[:'newest_item_time']
      end

      if attributes.key?(:'filter')
        self.filter = attributes[:'filter']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @error_count.nil?
        invalid_properties.push('invalid value for "error_count", error_count cannot be nil.')
      end

      if @feed_url.nil?
        invalid_properties.push('invalid value for "feed_url", feed_url cannot be nil.')
      end

      if @feed_link.nil?
        invalid_properties.push('invalid value for "feed_link", feed_link cannot be nil.')
      end

      if @icon_url.nil?
        invalid_properties.push('invalid value for "icon_url", icon_url cannot be nil.')
      end

      if @unread.nil?
        invalid_properties.push('invalid value for "unread", unread cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @name.nil?
      return false if @error_count.nil?
      return false if @feed_url.nil?
      return false if @feed_link.nil?
      return false if @icon_url.nil?
      return false if @unread.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          message == o.message &&
          error_count == o.error_count &&
          last_refresh == o.last_refresh &&
          next_refresh == o.next_refresh &&
          feed_url == o.feed_url &&
          feed_link == o.feed_link &&
          icon_url == o.icon_url &&
          unread == o.unread &&
          category_id == o.category_id &&
          position == o.position &&
          newest_item_time == o.newest_item_time &&
          filter == o.filter
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, message, error_count, last_refresh, next_refresh, feed_url, feed_link, icon_url, unread, category_id, position, newest_item_time, filter].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CommafeedClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
