=begin
#CommaFeed API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module CommafeedClient
  # Server infos
  class ServerInfo
    attr_accessor :announcement

    attr_accessor :version

    attr_accessor :git_commit

    attr_accessor :allow_registrations

    attr_accessor :google_analytics_code

    attr_accessor :smtp_enabled

    attr_accessor :demo_account_enabled

    attr_accessor :websocket_enabled

    attr_accessor :websocket_ping_interval

    attr_accessor :tree_reload_interval

    attr_accessor :force_refresh_cooldown_duration

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'announcement' => :'announcement',
        :'version' => :'version',
        :'git_commit' => :'gitCommit',
        :'allow_registrations' => :'allowRegistrations',
        :'google_analytics_code' => :'googleAnalyticsCode',
        :'smtp_enabled' => :'smtpEnabled',
        :'demo_account_enabled' => :'demoAccountEnabled',
        :'websocket_enabled' => :'websocketEnabled',
        :'websocket_ping_interval' => :'websocketPingInterval',
        :'tree_reload_interval' => :'treeReloadInterval',
        :'force_refresh_cooldown_duration' => :'forceRefreshCooldownDuration'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'announcement' => :'String',
        :'version' => :'String',
        :'git_commit' => :'String',
        :'allow_registrations' => :'Boolean',
        :'google_analytics_code' => :'String',
        :'smtp_enabled' => :'Boolean',
        :'demo_account_enabled' => :'Boolean',
        :'websocket_enabled' => :'Boolean',
        :'websocket_ping_interval' => :'Integer',
        :'tree_reload_interval' => :'Integer',
        :'force_refresh_cooldown_duration' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CommafeedClient::ServerInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CommafeedClient::ServerInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'announcement')
        self.announcement = attributes[:'announcement']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      else
        self.version = nil
      end

      if attributes.key?(:'git_commit')
        self.git_commit = attributes[:'git_commit']
      else
        self.git_commit = nil
      end

      if attributes.key?(:'allow_registrations')
        self.allow_registrations = attributes[:'allow_registrations']
      else
        self.allow_registrations = nil
      end

      if attributes.key?(:'google_analytics_code')
        self.google_analytics_code = attributes[:'google_analytics_code']
      end

      if attributes.key?(:'smtp_enabled')
        self.smtp_enabled = attributes[:'smtp_enabled']
      else
        self.smtp_enabled = nil
      end

      if attributes.key?(:'demo_account_enabled')
        self.demo_account_enabled = attributes[:'demo_account_enabled']
      else
        self.demo_account_enabled = nil
      end

      if attributes.key?(:'websocket_enabled')
        self.websocket_enabled = attributes[:'websocket_enabled']
      else
        self.websocket_enabled = nil
      end

      if attributes.key?(:'websocket_ping_interval')
        self.websocket_ping_interval = attributes[:'websocket_ping_interval']
      else
        self.websocket_ping_interval = nil
      end

      if attributes.key?(:'tree_reload_interval')
        self.tree_reload_interval = attributes[:'tree_reload_interval']
      else
        self.tree_reload_interval = nil
      end

      if attributes.key?(:'force_refresh_cooldown_duration')
        self.force_refresh_cooldown_duration = attributes[:'force_refresh_cooldown_duration']
      else
        self.force_refresh_cooldown_duration = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      if @git_commit.nil?
        invalid_properties.push('invalid value for "git_commit", git_commit cannot be nil.')
      end

      if @allow_registrations.nil?
        invalid_properties.push('invalid value for "allow_registrations", allow_registrations cannot be nil.')
      end

      if @smtp_enabled.nil?
        invalid_properties.push('invalid value for "smtp_enabled", smtp_enabled cannot be nil.')
      end

      if @demo_account_enabled.nil?
        invalid_properties.push('invalid value for "demo_account_enabled", demo_account_enabled cannot be nil.')
      end

      if @websocket_enabled.nil?
        invalid_properties.push('invalid value for "websocket_enabled", websocket_enabled cannot be nil.')
      end

      if @websocket_ping_interval.nil?
        invalid_properties.push('invalid value for "websocket_ping_interval", websocket_ping_interval cannot be nil.')
      end

      if @tree_reload_interval.nil?
        invalid_properties.push('invalid value for "tree_reload_interval", tree_reload_interval cannot be nil.')
      end

      if @force_refresh_cooldown_duration.nil?
        invalid_properties.push('invalid value for "force_refresh_cooldown_duration", force_refresh_cooldown_duration cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @version.nil?
      return false if @git_commit.nil?
      return false if @allow_registrations.nil?
      return false if @smtp_enabled.nil?
      return false if @demo_account_enabled.nil?
      return false if @websocket_enabled.nil?
      return false if @websocket_ping_interval.nil?
      return false if @tree_reload_interval.nil?
      return false if @force_refresh_cooldown_duration.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          announcement == o.announcement &&
          version == o.version &&
          git_commit == o.git_commit &&
          allow_registrations == o.allow_registrations &&
          google_analytics_code == o.google_analytics_code &&
          smtp_enabled == o.smtp_enabled &&
          demo_account_enabled == o.demo_account_enabled &&
          websocket_enabled == o.websocket_enabled &&
          websocket_ping_interval == o.websocket_ping_interval &&
          tree_reload_interval == o.tree_reload_interval &&
          force_refresh_cooldown_duration == o.force_refresh_cooldown_duration
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [announcement, version, git_commit, allow_registrations, google_analytics_code, smtp_enabled, demo_account_enabled, websocket_enabled, websocket_ping_interval, tree_reload_interval, force_refresh_cooldown_duration].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CommafeedClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
