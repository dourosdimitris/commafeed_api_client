=begin
#CommaFeed API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module CommafeedClient
  # Entry details
  class Entry
    # entry id
    attr_accessor :id

    # entry guid
    attr_accessor :guid

    # entry title
    attr_accessor :title

    # entry content
    attr_accessor :content

    # comma-separated list of categories
    attr_accessor :categories

    # whether entry content and title are rtl
    attr_accessor :rtl

    # entry author
    attr_accessor :author

    # entry enclosure url, if any
    attr_accessor :enclosure_url

    # entry enclosure mime type, if any
    attr_accessor :enclosure_type

    # entry media description, if any
    attr_accessor :media_description

    # entry media thumbnail url, if any
    attr_accessor :media_thumbnail_url

    # entry media thumbnail width, if any
    attr_accessor :media_thumbnail_width

    # entry media thumbnail height, if any
    attr_accessor :media_thumbnail_height

    # entry publication date
    attr_accessor :date

    # entry insertion date in the database
    attr_accessor :inserted_date

    # feed id
    attr_accessor :feed_id

    # feed name
    attr_accessor :feed_name

    # this entry's feed url
    attr_accessor :feed_url

    # this entry's website url
    attr_accessor :feed_link

    # The favicon url to use for this feed
    attr_accessor :icon_url

    # entry url
    attr_accessor :url

    # read status
    attr_accessor :read

    # starred status
    attr_accessor :starred

    # whether the entry is still markable (old entry statuses are discarded)
    attr_accessor :markable

    # tags
    attr_accessor :tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'guid' => :'guid',
        :'title' => :'title',
        :'content' => :'content',
        :'categories' => :'categories',
        :'rtl' => :'rtl',
        :'author' => :'author',
        :'enclosure_url' => :'enclosureUrl',
        :'enclosure_type' => :'enclosureType',
        :'media_description' => :'mediaDescription',
        :'media_thumbnail_url' => :'mediaThumbnailUrl',
        :'media_thumbnail_width' => :'mediaThumbnailWidth',
        :'media_thumbnail_height' => :'mediaThumbnailHeight',
        :'date' => :'date',
        :'inserted_date' => :'insertedDate',
        :'feed_id' => :'feedId',
        :'feed_name' => :'feedName',
        :'feed_url' => :'feedUrl',
        :'feed_link' => :'feedLink',
        :'icon_url' => :'iconUrl',
        :'url' => :'url',
        :'read' => :'read',
        :'starred' => :'starred',
        :'markable' => :'markable',
        :'tags' => :'tags'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'guid' => :'String',
        :'title' => :'String',
        :'content' => :'String',
        :'categories' => :'String',
        :'rtl' => :'Boolean',
        :'author' => :'String',
        :'enclosure_url' => :'String',
        :'enclosure_type' => :'String',
        :'media_description' => :'String',
        :'media_thumbnail_url' => :'String',
        :'media_thumbnail_width' => :'Integer',
        :'media_thumbnail_height' => :'Integer',
        :'date' => :'Float',
        :'inserted_date' => :'Float',
        :'feed_id' => :'String',
        :'feed_name' => :'String',
        :'feed_url' => :'String',
        :'feed_link' => :'String',
        :'icon_url' => :'String',
        :'url' => :'String',
        :'read' => :'Boolean',
        :'starred' => :'Boolean',
        :'markable' => :'Boolean',
        :'tags' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CommafeedClient::Entry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CommafeedClient::Entry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'guid')
        self.guid = attributes[:'guid']
      else
        self.guid = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      else
        self.content = nil
      end

      if attributes.key?(:'categories')
        self.categories = attributes[:'categories']
      end

      if attributes.key?(:'rtl')
        self.rtl = attributes[:'rtl']
      else
        self.rtl = nil
      end

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      end

      if attributes.key?(:'enclosure_url')
        self.enclosure_url = attributes[:'enclosure_url']
      end

      if attributes.key?(:'enclosure_type')
        self.enclosure_type = attributes[:'enclosure_type']
      end

      if attributes.key?(:'media_description')
        self.media_description = attributes[:'media_description']
      end

      if attributes.key?(:'media_thumbnail_url')
        self.media_thumbnail_url = attributes[:'media_thumbnail_url']
      end

      if attributes.key?(:'media_thumbnail_width')
        self.media_thumbnail_width = attributes[:'media_thumbnail_width']
      end

      if attributes.key?(:'media_thumbnail_height')
        self.media_thumbnail_height = attributes[:'media_thumbnail_height']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      else
        self.date = nil
      end

      if attributes.key?(:'inserted_date')
        self.inserted_date = attributes[:'inserted_date']
      else
        self.inserted_date = nil
      end

      if attributes.key?(:'feed_id')
        self.feed_id = attributes[:'feed_id']
      else
        self.feed_id = nil
      end

      if attributes.key?(:'feed_name')
        self.feed_name = attributes[:'feed_name']
      else
        self.feed_name = nil
      end

      if attributes.key?(:'feed_url')
        self.feed_url = attributes[:'feed_url']
      else
        self.feed_url = nil
      end

      if attributes.key?(:'feed_link')
        self.feed_link = attributes[:'feed_link']
      else
        self.feed_link = nil
      end

      if attributes.key?(:'icon_url')
        self.icon_url = attributes[:'icon_url']
      else
        self.icon_url = nil
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      else
        self.url = nil
      end

      if attributes.key?(:'read')
        self.read = attributes[:'read']
      else
        self.read = nil
      end

      if attributes.key?(:'starred')
        self.starred = attributes[:'starred']
      else
        self.starred = nil
      end

      if attributes.key?(:'markable')
        self.markable = attributes[:'markable']
      else
        self.markable = nil
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      else
        self.tags = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @guid.nil?
        invalid_properties.push('invalid value for "guid", guid cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @content.nil?
        invalid_properties.push('invalid value for "content", content cannot be nil.')
      end

      if @rtl.nil?
        invalid_properties.push('invalid value for "rtl", rtl cannot be nil.')
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @inserted_date.nil?
        invalid_properties.push('invalid value for "inserted_date", inserted_date cannot be nil.')
      end

      if @feed_id.nil?
        invalid_properties.push('invalid value for "feed_id", feed_id cannot be nil.')
      end

      if @feed_name.nil?
        invalid_properties.push('invalid value for "feed_name", feed_name cannot be nil.')
      end

      if @feed_url.nil?
        invalid_properties.push('invalid value for "feed_url", feed_url cannot be nil.')
      end

      if @feed_link.nil?
        invalid_properties.push('invalid value for "feed_link", feed_link cannot be nil.')
      end

      if @icon_url.nil?
        invalid_properties.push('invalid value for "icon_url", icon_url cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @read.nil?
        invalid_properties.push('invalid value for "read", read cannot be nil.')
      end

      if @starred.nil?
        invalid_properties.push('invalid value for "starred", starred cannot be nil.')
      end

      if @markable.nil?
        invalid_properties.push('invalid value for "markable", markable cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @guid.nil?
      return false if @title.nil?
      return false if @content.nil?
      return false if @rtl.nil?
      return false if @date.nil?
      return false if @inserted_date.nil?
      return false if @feed_id.nil?
      return false if @feed_name.nil?
      return false if @feed_url.nil?
      return false if @feed_link.nil?
      return false if @icon_url.nil?
      return false if @url.nil?
      return false if @read.nil?
      return false if @starred.nil?
      return false if @markable.nil?
      return false if @tags.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          guid == o.guid &&
          title == o.title &&
          content == o.content &&
          categories == o.categories &&
          rtl == o.rtl &&
          author == o.author &&
          enclosure_url == o.enclosure_url &&
          enclosure_type == o.enclosure_type &&
          media_description == o.media_description &&
          media_thumbnail_url == o.media_thumbnail_url &&
          media_thumbnail_width == o.media_thumbnail_width &&
          media_thumbnail_height == o.media_thumbnail_height &&
          date == o.date &&
          inserted_date == o.inserted_date &&
          feed_id == o.feed_id &&
          feed_name == o.feed_name &&
          feed_url == o.feed_url &&
          feed_link == o.feed_link &&
          icon_url == o.icon_url &&
          url == o.url &&
          read == o.read &&
          starred == o.starred &&
          markable == o.markable &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, guid, title, content, categories, rtl, author, enclosure_url, enclosure_type, media_description, media_thumbnail_url, media_thumbnail_width, media_thumbnail_height, date, inserted_date, feed_id, feed_name, feed_url, feed_link, icon_url, url, read, starred, markable, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CommafeedClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
