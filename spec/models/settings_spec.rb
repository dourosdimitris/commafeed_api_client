=begin
#CommaFeed API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for CommafeedClient::Settings
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe CommafeedClient::Settings do
  let(:instance) { CommafeedClient::Settings.new }

  describe 'test an instance of Settings' do
    it 'should create an instance of Settings' do
      # uncomment below to test the instance creation
      #expect(instance).to be_instance_of(CommafeedClient::Settings)
    end
  end

  describe 'test attribute "language"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "reading_mode"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["all,unread"])
      # validator.allowable_values.each do |value|
      #   expect { instance.reading_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "reading_order"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["asc,desc"])
      # validator.allowable_values.each do |value|
      #   expect { instance.reading_order = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "show_read"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "scroll_marks"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "custom_css"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "custom_js"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "scroll_speed"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "scroll_mode"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["always,never,if_needed"])
      # validator.allowable_values.each do |value|
      #   expect { instance.scroll_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "entries_to_keep_on_top_when_scrolling"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "star_icon_display_mode"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["always,never,on_desktop,on_mobile"])
      # validator.allowable_values.each do |value|
      #   expect { instance.star_icon_display_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "external_link_icon_display_mode"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["always,never,on_desktop,on_mobile"])
      # validator.allowable_values.each do |value|
      #   expect { instance.external_link_icon_display_mode = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "mark_all_as_read_confirmation"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "custom_context_menu"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "mobile_footer"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "unread_count_title"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "unread_count_favicon"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "sharing_settings"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
